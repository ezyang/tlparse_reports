class <lambda>(torch.nn.Module):
    def forward(self, arg0_1: "f32[768, 768][768, 1]cpu", arg1_1: "f32[768][1]cpu", arg2_1: "f32[768][1]cpu", arg3_1: "f32[768][1]cpu", arg4_1: "f32[50358, 768][768, 1]cpu", arg5_1: "f32[50358][1]cpu", arg6_1: "f32[1, 819, 768][638976, 768, 1]cpu"):
        # File: /localdisk/leslie/miniconda/envs/pytorch_community/lib/python3.10/site-packages/transformers/models/big_bird/modeling_big_bird.py:1689 in forward, code: hidden_states = self.dense(hidden_states)
        convert_element_type: "bf16[768][1]cpu" = torch.ops.prims.convert_element_type.default(arg1_1, torch.bfloat16);  arg1_1 = None
        convert_element_type_1: "bf16[768, 768][768, 1]cpu" = torch.ops.prims.convert_element_type.default(arg0_1, torch.bfloat16);  arg0_1 = None
        convert_element_type_2: "bf16[1, 819, 768][638976, 768, 1]cpu" = torch.ops.prims.convert_element_type.default(arg6_1, torch.bfloat16);  arg6_1 = None
        view: "bf16[819, 768][768, 1]cpu" = torch.ops.aten.view.default(convert_element_type_2, [819, 768]);  convert_element_type_2 = None
        permute: "bf16[768, 768][1, 768]cpu" = torch.ops.aten.permute.default(convert_element_type_1, [1, 0]);  convert_element_type_1 = None
        addmm: "bf16[819, 768][768, 1]cpu" = torch.ops.aten.addmm.default(convert_element_type, view, permute);  convert_element_type = view = permute = None
        view_1: "bf16[1, 819, 768][628992, 768, 1]cpu" = torch.ops.aten.view.default(addmm, [1, 819, 768]);  addmm = None
        
        # File: /localdisk/leslie/miniconda/envs/pytorch_community/lib/python3.10/site-packages/transformers/activations.py:57 in forward, code: return 0.5 * input * (1.0 + torch.tanh(math.sqrt(2.0 / math.pi) * (input + 0.044715 * torch.pow(input, 3.0))))
        mul: "bf16[1, 819, 768][628992, 768, 1]cpu" = torch.ops.aten.mul.Tensor(view_1, 0.5)
        pow_1: "bf16[1, 819, 768][628992, 768, 1]cpu" = torch.ops.aten.pow.Tensor_Scalar(view_1, 3.0)
        mul_1: "bf16[1, 819, 768][628992, 768, 1]cpu" = torch.ops.aten.mul.Tensor(pow_1, 0.044715);  pow_1 = None
        add: "bf16[1, 819, 768][628992, 768, 1]cpu" = torch.ops.aten.add.Tensor(view_1, mul_1);  view_1 = mul_1 = None
        mul_2: "bf16[1, 819, 768][628992, 768, 1]cpu" = torch.ops.aten.mul.Tensor(add, 0.7978845608028654);  add = None
        tanh: "bf16[1, 819, 768][628992, 768, 1]cpu" = torch.ops.aten.tanh.default(mul_2);  mul_2 = None
        add_1: "bf16[1, 819, 768][628992, 768, 1]cpu" = torch.ops.aten.add.Tensor(tanh, 1.0);  tanh = None
        mul_3: "bf16[1, 819, 768][628992, 768, 1]cpu" = torch.ops.aten.mul.Tensor(mul, add_1);  mul = add_1 = None
        
        # File: /localdisk/leslie/miniconda/envs/pytorch_community/lib/python3.10/site-packages/transformers/models/big_bird/modeling_big_bird.py:1691 in forward, code: hidden_states = self.LayerNorm(hidden_states)
        convert_element_type_6: "f32[1, 819, 768][628992, 768, 1]cpu" = torch.ops.prims.convert_element_type.default(mul_3, torch.float32)
        var_mean = torch.ops.aten.var_mean.correction(convert_element_type_6, [2], correction = 0, keepdim = True);  convert_element_type_6 = None
        getitem: "f32[1, 819, 1][819, 1, 1]cpu" = var_mean[0]
        getitem_1: "f32[1, 819, 1][819, 1, 1]cpu" = var_mean[1];  var_mean = None
        add_2: "f32[1, 819, 1][819, 1, 1]cpu" = torch.ops.aten.add.Tensor(getitem, 1e-12);  getitem = None
        rsqrt: "f32[1, 819, 1][819, 1, 1]cpu" = torch.ops.aten.rsqrt.default(add_2);  add_2 = None
        sub: "f32[1, 819, 768][628992, 768, 1]cpu" = torch.ops.aten.sub.Tensor(mul_3, getitem_1);  mul_3 = getitem_1 = None
        mul_4: "f32[1, 819, 768][628992, 768, 1]cpu" = torch.ops.aten.mul.Tensor(sub, rsqrt);  sub = rsqrt = None
        mul_5: "f32[1, 819, 768][628992, 768, 1]cpu" = torch.ops.aten.mul.Tensor(mul_4, arg2_1);  mul_4 = arg2_1 = None
        add_3: "f32[1, 819, 768][628992, 768, 1]cpu" = torch.ops.aten.add.Tensor(mul_5, arg3_1);  mul_5 = arg3_1 = None
        convert_element_type_7: "bf16[1, 819, 768][628992, 768, 1]cpu" = torch.ops.prims.convert_element_type.default(add_3, torch.bfloat16);  add_3 = None
        
        # File: /localdisk/leslie/miniconda/envs/pytorch_community/lib/python3.10/site-packages/transformers/models/big_bird/modeling_big_bird.py:1712 in forward, code: hidden_states = self.decoder(hidden_states)
        convert_element_type_10: "bf16[50358][1]cpu" = torch.ops.prims.convert_element_type.default(arg5_1, torch.bfloat16);  arg5_1 = None
        convert_element_type_11: "bf16[50358, 768][768, 1]cpu" = torch.ops.prims.convert_element_type.default(arg4_1, torch.bfloat16);  arg4_1 = None
        view_2: "bf16[819, 768][768, 1]cpu" = torch.ops.aten.view.default(convert_element_type_7, [819, 768]);  convert_element_type_7 = None
        permute_1: "bf16[768, 50358][1, 768]cpu" = torch.ops.aten.permute.default(convert_element_type_11, [1, 0]);  convert_element_type_11 = None
        addmm_1: "bf16[819, 50358][50358, 1]cpu" = torch.ops.aten.addmm.default(convert_element_type_10, view_2, permute_1);  convert_element_type_10 = view_2 = permute_1 = None
        view_3: "bf16[1, 819, 50358][41243202, 50358, 1]cpu" = torch.ops.aten.view.default(addmm_1, [1, 819, 50358]);  addmm_1 = None
        return (view_3,)
        